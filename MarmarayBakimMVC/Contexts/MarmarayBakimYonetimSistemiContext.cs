// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using MarmarayBakimMVC.Models;

namespace MarmarayBakimMVC.Contexts
{
    public partial class MarmarayBakimYonetimSistemiContext : DbContext
    {
        public MarmarayBakimYonetimSistemiContext()
        {
        }

        public MarmarayBakimYonetimSistemiContext(DbContextOptions<MarmarayBakimYonetimSistemiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Ariza> Ariza { get; set; }
        public virtual DbSet<ArizaTuru> ArizaTuru { get; set; }
        public virtual DbSet<Bolge> Bolge { get; set; }
        public virtual DbSet<Brans> Brans { get; set; }
        public virtual DbSet<Ekipman> Ekipman { get; set; }
        public virtual DbSet<EkipmanTur> EkipmanTur { get; set; }
        public virtual DbSet<Gorev> Gorev { get; set; }
        public virtual DbSet<Istasyon> Istasyon { get; set; }
        public virtual DbSet<Personel> Personel { get; set; }
        public virtual DbSet<Sistem> Sistem { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-FDV7BE8\\SQLEXPRESS;Initial Catalog=MarmarayBakimYonetimSistemi;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ariza>(entity =>
            {
                entity.Property(e => e.ArizaTuruAciklama).IsFixedLength();

                entity.HasOne(d => d.Ekipman)
                    .WithMany(p => p.Ariza)
                    .HasForeignKey(d => d.EkipmanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ariza_Ekipman");
            });

            modelBuilder.Entity<ArizaTuru>(entity =>
            {
                entity.Property(e => e.ArizaTuruAdi).IsFixedLength();

                entity.HasOne(d => d.EkipmanTur)
                    .WithMany(p => p.ArizaTuru)
                    .HasForeignKey(d => d.EkipmanTurId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArizaTuru_Ekipman");

                entity.HasOne(d => d.EkipmanTurNavigation)
                    .WithMany(p => p.ArizaTuru)
                    .HasForeignKey(d => d.EkipmanTurId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArizaTuru_EkipmanTur");
            });

            modelBuilder.Entity<Bolge>(entity =>
            {
                entity.Property(e => e.BolgeAd).IsFixedLength();
            });

            modelBuilder.Entity<Brans>(entity =>
            {
                entity.Property(e => e.BransAd).IsFixedLength();
            });

            modelBuilder.Entity<Ekipman>(entity =>
            {
                entity.Property(e => e.EkipmanKod).IsFixedLength();

                entity.HasOne(d => d.EkipmanTur)
                    .WithMany(p => p.Ekipman)
                    .HasForeignKey(d => d.EkipmanTurId)
                    .HasConstraintName("FK_Ekipman_EkipmanTur");

                entity.HasOne(d => d.Istasyon)
                    .WithMany(p => p.Ekipman)
                    .HasForeignKey(d => d.IstasyonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ekipman_Istasyon");

                entity.HasOne(d => d.Sistem)
                    .WithMany(p => p.Ekipman)
                    .HasForeignKey(d => d.SistemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ekipman_Sistem");
            });

            modelBuilder.Entity<EkipmanTur>(entity =>
            {
                entity.Property(e => e.EkipmanTurAd).IsFixedLength();
            });

            modelBuilder.Entity<Gorev>(entity =>
            {
                entity.Property(e => e.GorevId).ValueGeneratedNever();

                entity.Property(e => e.GorevAd).IsFixedLength();
            });

            modelBuilder.Entity<Istasyon>(entity =>
            {
                entity.Property(e => e.IstasyonAdi).IsFixedLength();

                entity.HasOne(d => d.Bolge)
                    .WithMany(p => p.Istasyon)
                    .HasForeignKey(d => d.BolgeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Istasyon_Bolge");

                entity.HasOne(d => d.Personel)
                    .WithMany(p => p.Istasyon)
                    .HasForeignKey(d => d.PersonelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Istasyon_Personel");
            });

            modelBuilder.Entity<Personel>(entity =>
            {
                entity.Property(e => e.Ad).IsFixedLength();

                entity.Property(e => e.Soyad).IsFixedLength();

                entity.Property(e => e.TcNo).IsFixedLength();

                entity.HasOne(d => d.Brans)
                    .WithMany(p => p.Personel)
                    .HasForeignKey(d => d.BransId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Personel_Brans");

                entity.HasOne(d => d.Gorev)
                    .WithMany(p => p.Personel)
                    .HasForeignKey(d => d.GorevId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Personel_Gorev");
            });

            modelBuilder.Entity<Sistem>(entity =>
            {
                entity.Property(e => e.SistemAdi).IsFixedLength();

                entity.HasOne(d => d.Bolge)
                    .WithMany(p => p.Sistem)
                    .HasForeignKey(d => d.BolgeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sistem_Bolge");

                entity.HasOne(d => d.Personel)
                    .WithMany(p => p.Sistem)
                    .HasForeignKey(d => d.PersonelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sistem_Personel");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}